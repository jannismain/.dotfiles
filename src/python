## Python
alias p="python"
alias p3="python3"
### Virtual Environments
alias venv="source env/bin/activate 2> /dev/null || source .venv/bin/activate"
### Pip

# prevent globbing issue when installing with extras
# i.e. pip install something[extra] --> zsh: no matches found: something[extra]
alias pip='noglob pip'
alias pipi="pip install"
alias pipir="pip install -r requirements.txt"
alias pipirin="pip install -r requirements.in"
alias pipl="pip list"
alias pipv="pip --version"
function pipu() {
  if [ -n "$1" ]
  then
    python -m pip install --upgrade "$1"
  else
    python -m pip install --upgrade pip
  fi
}
# Create requirements file
alias pipreq="pip freeze > requirements.txt"
# Update all installed packages
function pipupall {
  # non-GNU xargs does not support nor need `--no-run-if-empty`
  local xargs="xargs --no-run-if-empty"
  xargs --version 2>/dev/null | grep -q GNU || xargs="xargs"
  pip list --outdated --format freeze | cut -d= -f1 | ${=xargs} pip install --upgrade
}

alias pipun="pip uninstall"
# Uninstalled all installed packages
function pipunall {
  # non-GNU xargs does not support nor need `--no-run-if-empty`
  local xargs="xargs --no-run-if-empty"
  xargs --version 2>/dev/null | grep -q GNU || xargs="xargs"
  pip list --format freeze | cut -d= -f1 | ${=xargs} pip uninstall -y
}

# configure pipx
if command -v pipx &> /dev/null
then
    export PATH="$PATH:~/.local/bin"
    eval "$(register-python-argcomplete pipx)"  # requires bashcompinit
    export PIPX_DEFAULT_PYTHON=python  # use system python by default
    export PIPX_HOME=~/.pipx/
fi
alias pxl="pipx list"
alias pxi="pipx install"
alias pxu="pipx upgrade"

# pytest
if command -v pytest &> /dev/null
then
    eval "$(register-python-argcomplete pytest)"
fi

# hatch
alias h="hatch"
alias hr="hatch run"
alias hv="hatch version"

function pyclean {
    find . -type f -name '*.py[co]' -delete -o -type d -name __pycache__ -delete
}

# bump-my-version
alias bump="bump-my-version"

# configure pyenv

# using a custom completion script .zfunc/_pyenv
# to allow for tab-completion within z4h/fzf
# see https://github.com/pyenv/pyenv/pull/1644
# eval "$(pyenv init -)"
# eval "$(pyenv virtualenv-init -)"

# Create and activate a new virtual environment with latest available
# Python version for project in current directory.
# Usage:
#   $ cd my_project
#   $ pv
#   (my_project) $ _
function pv() {
  if [ -n "$1" ]
  then
    venv_name=$1
  else
    venv_name=`basename $PWD`
  fi
  pyenv virtualenv `pyenv latest 3` "$venv_name" 2> /dev/null
  pyenv local $venv_name
  pyenv shell $venv_name
}

alias pvd='pyenv virtualenv-delete'
